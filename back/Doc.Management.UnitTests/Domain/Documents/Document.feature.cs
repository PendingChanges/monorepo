// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Doc.Management.UnitTests.Domain.Documents
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DocumentFeature : object, Xunit.IClassFixture<DocumentFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Document.feature"
#line hidden
        
        public DocumentFeature(DocumentFeature.FixtureData fixtureData, Doc_Management_UnitTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Domain/Documents", "Document", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="The user create a document")]
        [Xunit.TraitAttribute("FeatureTitle", "Document")]
        [Xunit.TraitAttribute("Description", "The user create a document")]
        [Xunit.TraitAttribute("Category", "document")]
        [Xunit.InlineDataAttribute("2024/06/26/kdakkozakokdoza", "testuser", "MyDocument", "file", "ext", new string[0])]
        public void TheUserCreateADocument(string key, string userid, string documentName, string filename, string extension, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "document"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("key", key);
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("documentName", documentName);
            argumentsOfScenario.Add("filename", filename);
            argumentsOfScenario.Add("extension", extension);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user create a document", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("No existing document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("A user with id \"{0}\" create a document with key \"{1}\" name \"{2}\", filename \"{3}\" " +
                            "and extension \"{4}\"", userid, key, documentName, filename, extension), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then(string.Format("A document with name \"{0}\", filnemae \"{1}\" extension \"{2}\" is created by \"{3}\"", documentName, filename, extension, userid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="A user delete a document")]
        [Xunit.TraitAttribute("FeatureTitle", "Document")]
        [Xunit.TraitAttribute("Description", "A user delete a document")]
        [Xunit.TraitAttribute("Category", "document")]
        [Xunit.InlineDataAttribute("2024/06/26/kdakkozakokdoza", "MyDocument", "file", "ext", new string[0])]
        public void AUserDeleteADocument(string key, string documentName, string filename, string extension, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "document"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("key", key);
            argumentsOfScenario.Add("documentName", documentName);
            argumentsOfScenario.Add("filename", filename);
            argumentsOfScenario.Add("extension", extension);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user delete a document", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given(string.Format("An existing document with key \"{0}\", name \"<name>\", filename \"{1}\" and extension " +
                            "\"{2}\"", key, filename, extension), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.When("A user delete the document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("The document is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.And("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="A user modifies a document")]
        [Xunit.TraitAttribute("FeatureTitle", "Document")]
        [Xunit.TraitAttribute("Description", "A user modifies a document")]
        [Xunit.TraitAttribute("Category", "document")]
        [Xunit.InlineDataAttribute("2024/06/26/kdakkozakokdoza", "testuser", "MyDocument", "file", "ext", "MyUpdatedDoc", "updatedfile", "newext", new string[0])]
        public void AUserModifiesADocument(string key, string userid, string name, string filename, string extension, string newName, string newFilename, string newExtension, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "document"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("key", key);
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("filename", filename);
            argumentsOfScenario.Add("extension", extension);
            argumentsOfScenario.Add("newName", newName);
            argumentsOfScenario.Add("newFilename", newFilename);
            argumentsOfScenario.Add("newExtension", newExtension);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user modifies a document", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
  testRunner.Given(string.Format("An existing document with key \"{0}\", name \"{1}\", filename \"{2}\" and extension \"{3" +
                            "}\"", key, name, filename, extension), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
  testRunner.When(string.Format("A user with id \"{0}\" modifies the document with new name \"{1}\", new filename \"{2}" +
                            "\", and new extension \"{3}\"", userid, newName, newFilename, newExtension), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
  testRunner.Then(string.Format("The document\'s name, filename, and extension are updated to \"{0}\", \"{1}\", and \"{2" +
                            "}\" respectively", newName, newFilename, newExtension), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DocumentFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DocumentFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
