// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Journalist.Crm.UnitTests.Domain.Pitches
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PitchFeature : object, Xunit.IClassFixture<PitchFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Pitch.feature"
#line hidden
        
        public PitchFeature(PitchFeature.FixtureData fixtureData, Journalist_Crm_UnitTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Domain/Pitches", "Pitch", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="The user create a pitch")]
        [Xunit.TraitAttribute("FeatureTitle", "Pitch")]
        [Xunit.TraitAttribute("Description", "The user create a pitch")]
        [Xunit.TraitAttribute("Category", "pitch")]
        [Xunit.InlineDataAttribute("testuser", "Pitch Test", "Pitch Content", "8 april 2023", "9 april 2023", "client Id", "Idea Id", new string[0])]
        public void TheUserCreateAPitch(string userid, string pitchTitle, string pitchContent, string pitchDeadLineDate, string pitchIssueDate, string pitchClientId, string pitchIdeaId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "pitch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("pitchTitle", pitchTitle);
            argumentsOfScenario.Add("pitchContent", pitchContent);
            argumentsOfScenario.Add("pitchDeadLineDate", pitchDeadLineDate);
            argumentsOfScenario.Add("pitchIssueDate", pitchIssueDate);
            argumentsOfScenario.Add("pitchClientId", pitchClientId);
            argumentsOfScenario.Add("pitchIdeaId", pitchIdeaId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user create a pitch", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("No existing pitch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When(string.Format("A user with id \"{0}\" create a pitch with title \"{1}\", content \"{2}\", dead line da" +
                            "te \"{3}\", issue date \"{4}\", client id \"{5}\" and idea id \"{6}\"", userid, pitchTitle, pitchContent, pitchDeadLineDate, pitchIssueDate, pitchClientId, pitchIdeaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then(string.Format("A pitch \"{0}\", content \"{1}\", dead line date \"{2}\", issue date \"{3}\", client id \"" +
                            "{4}\" and idea id \"{5}\" owned by \"{6}\" is created", pitchTitle, pitchContent, pitchDeadLineDate, pitchIssueDate, pitchClientId, pitchIdeaId, userid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="A user cancel its own pitch")]
        [Xunit.TraitAttribute("FeatureTitle", "Pitch")]
        [Xunit.TraitAttribute("Description", "A user cancel its own pitch")]
        [Xunit.TraitAttribute("Category", "pitch")]
        [Xunit.InlineDataAttribute("testuser", "Pitch Test", "Pitch Content", "8 april 2023", "9 april 2023", "client Id", "Idea Id", new string[0])]
        public void AUserCancelItsOwnPitch(string userid, string pitchTitle, string pitchContent, string pitchDeadLineDate, string pitchIssueDate, string pitchClientId, string pitchIdeaId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "pitch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("pitchTitle", pitchTitle);
            argumentsOfScenario.Add("pitchContent", pitchContent);
            argumentsOfScenario.Add("pitchDeadLineDate", pitchDeadLineDate);
            argumentsOfScenario.Add("pitchIssueDate", pitchIssueDate);
            argumentsOfScenario.Add("pitchClientId", pitchClientId);
            argumentsOfScenario.Add("pitchIdeaId", pitchIdeaId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user cancel its own pitch", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given(string.Format("An existing pitch with title \"{0}\", content \"{1}\", dead line date \"{2}\", issue da" +
                            "te \"{3}\", client id \"{4}\", idea id \"{5}\" and an owner \"{6}\"", pitchTitle, pitchContent, pitchDeadLineDate, pitchIssueDate, pitchClientId, pitchIdeaId, userid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.When(string.Format("A user with id \"{0}\" cancel the pitch", userid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("The pitch is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.And("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="A user validate its own pitch")]
        [Xunit.TraitAttribute("FeatureTitle", "Pitch")]
        [Xunit.TraitAttribute("Description", "A user validate its own pitch")]
        [Xunit.TraitAttribute("Category", "pitch")]
        [Xunit.InlineDataAttribute("testuser", "Pitch Test", "Pitch Content", "8 april 2023", "9 april 2023", "client Id", "Idea Id", new string[0])]
        public void AUserValidateItsOwnPitch(string userid, string pitchTitle, string pitchContent, string pitchDeadLineDate, string pitchIssueDate, string pitchClientId, string pitchIdeaId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "pitch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("pitchTitle", pitchTitle);
            argumentsOfScenario.Add("pitchContent", pitchContent);
            argumentsOfScenario.Add("pitchDeadLineDate", pitchDeadLineDate);
            argumentsOfScenario.Add("pitchIssueDate", pitchIssueDate);
            argumentsOfScenario.Add("pitchClientId", pitchClientId);
            argumentsOfScenario.Add("pitchIdeaId", pitchIdeaId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user validate its own pitch", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given(string.Format("An existing pitch with title \"{0}\", content \"{1}\", dead line date \"{2}\", issue da" +
                            "te \"{3}\", client id \"{4}\", idea id \"{5}\" and an owner \"{6}\"", pitchTitle, pitchContent, pitchDeadLineDate, pitchIssueDate, pitchClientId, pitchIdeaId, userid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.When(string.Format("A user with id \"{0}\" validate the pitch", userid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("The pitch is validated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.And("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="A user tries to cancel a pitch he doesn\'t own")]
        [Xunit.TraitAttribute("FeatureTitle", "Pitch")]
        [Xunit.TraitAttribute("Description", "A user tries to cancel a pitch he doesn\'t own")]
        [Xunit.TraitAttribute("Category", "pitch")]
        [Xunit.InlineDataAttribute("testuser", "Pitch Test", "Pitch Content", "8 april 2023", "9 april 2023", "client Id", "Idea Id", "testuser2", "NOT_PITCH_OWNER", new string[0])]
        public void AUserTriesToCancelAPitchHeDoesntOwn(string userid, string pitchTitle, string pitchContent, string pitchDeadLineDate, string pitchIssueDate, string pitchClientId, string pitchIdeaId, string otherUserid, string errorCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "pitch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("pitchTitle", pitchTitle);
            argumentsOfScenario.Add("pitchContent", pitchContent);
            argumentsOfScenario.Add("pitchDeadLineDate", pitchDeadLineDate);
            argumentsOfScenario.Add("pitchIssueDate", pitchIssueDate);
            argumentsOfScenario.Add("pitchClientId", pitchClientId);
            argumentsOfScenario.Add("pitchIdeaId", pitchIdeaId);
            argumentsOfScenario.Add("otherUserid", otherUserid);
            argumentsOfScenario.Add("errorCode", errorCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user tries to cancel a pitch he doesn\'t own", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given(string.Format("An existing pitch with title \"{0}\", content \"{1}\", dead line date \"{2}\", issue da" +
                            "te \"{3}\", client id \"{4}\", idea id \"{5}\" and an owner \"{6}\"", pitchTitle, pitchContent, pitchDeadLineDate, pitchIssueDate, pitchClientId, pitchIdeaId, userid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.When(string.Format("A user with id \"{0}\" cancel the pitch", otherUserid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then(string.Format("An error with code \"{0}\" is raised", errorCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.And("The pitch is not deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="A user modify a pitch")]
        [Xunit.TraitAttribute("FeatureTitle", "Pitch")]
        [Xunit.TraitAttribute("Description", "A user modify a pitch")]
        [Xunit.TraitAttribute("Category", "pitch")]
        [Xunit.InlineDataAttribute("testuser", "Pitch Test", "Pitch Content", "8 april 2023", "9 april 2023", "client Id", "Idea Id", "Pitch Test Modified", "Pitch Content Modified", "10 april 2023", "11 april 2023", "client Id modified", "Idea Id modified", new string[0])]
        public void AUserModifyAPitch(string userid, string pitchTitle, string pitchContent, string pitchDeadLineDate, string pitchIssueDate, string pitchClientId, string pitchIdeaId, string newPitchTitle, string newPitchSummary, string newPitchDeadLineDate, string newPitchIssueDate, string newPitchClientId, string newPitchIdeaId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "pitch"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("userid", userid);
            argumentsOfScenario.Add("pitchTitle", pitchTitle);
            argumentsOfScenario.Add("pitchContent", pitchContent);
            argumentsOfScenario.Add("pitchDeadLineDate", pitchDeadLineDate);
            argumentsOfScenario.Add("pitchIssueDate", pitchIssueDate);
            argumentsOfScenario.Add("pitchClientId", pitchClientId);
            argumentsOfScenario.Add("pitchIdeaId", pitchIdeaId);
            argumentsOfScenario.Add("newPitchTitle", newPitchTitle);
            argumentsOfScenario.Add("newPitchSummary", newPitchSummary);
            argumentsOfScenario.Add("newPitchDeadLineDate", newPitchDeadLineDate);
            argumentsOfScenario.Add("newPitchIssueDate", newPitchIssueDate);
            argumentsOfScenario.Add("newPitchClientId", newPitchClientId);
            argumentsOfScenario.Add("newPitchIdeaId", newPitchIdeaId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user modify a pitch", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 48
 testRunner.Given(string.Format("An existing pitch with title \"{0}\", content \"{1}\", dead line date \"{2}\", issue da" +
                            "te \"{3}\", client id \"{4}\", idea id \"{5}\" and an owner \"{6}\"", pitchTitle, pitchContent, pitchDeadLineDate, pitchIssueDate, pitchClientId, pitchIdeaId, userid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
 testRunner.When(string.Format("A user with id \"{0}\" modify the pitch title \"{1}\", summary \"{2}\", dead line date " +
                            "\"{3}\", issue date \"{4}\", client id \"{5}\", idea id \"{6}\"", userid, newPitchTitle, newPitchSummary, newPitchDeadLineDate, newPitchIssueDate, newPitchClientId, newPitchIdeaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then(string.Format("The pitch content change to title \"{0}\" and summary \"{1}\"", newPitchTitle, newPitchSummary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.And(string.Format("The pitch deadline date is rescheduled to \"{0}\"", newPitchDeadLineDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And(string.Format("The pitch issue date is rescheduled to \"{0}\"", newPitchIssueDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And(string.Format("The pitch client change to \"{0}\"", newPitchClientId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And(string.Format("The pitch idea change to \"{0}\"", newPitchIdeaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("No errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PitchFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PitchFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
